# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c"
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/uwmodem.h" 1


typedef signed int (*uwmodem_recv_func_t)(unsigned char *data, const unsigned int dataSize);
typedef signed int (*uwmodem_seek_func_t)(unsigned char *data, const unsigned int dataSize);
typedef signed int (*uwmodem_send_func_t)(unsigned char *data, const unsigned int dataSize);
typedef signed int (*uwmodem_surface_func_t)();

int uwmodem_sendData(unsigned char *data, const unsigned int size);
void uwmodem_init(uwmodem_send_func_t sendFunc, uwmodem_recv_func_t recvFunc, uwmodem_seek_func_t seekFunc , uwmodem_surface_func_t surfaceFunc);
void uwmodem_process();
# 2 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 1


# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/mainboardstate.h" 1


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 25 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 360 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 385 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 386 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 361 "/usr/include/features.h" 2 3 4
# 384 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 385 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 2 3 4
# 4 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/mainboardstate.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/mb_types.h" 1



enum MAINBOARDSTATE {
    MAINBOARD_OFF = 0,
    MAINBOARD_RUNNING = 2,
    MAINBOARD_AUTONOMOUS,
    MAINBOARD_EMERGENCY,
    MAINBOARD_FULL_AUTONOMOUS,
    MAINBOARD_SURFACE,
    MAINBOARD_UNDEFINED,
    MAINBOARD_NUM_STATES,
};



typedef enum {
    MB_PING = 0x01,
    MB_SET_STATE = 0x02,
    MB_CONTROL = 0x04,
    MB_STATUS = 0x08,
    MB_ID_CAN = 0x0b,
    MB_MODE_CHANGE = 0x0c,
    MB_ID_CAN_ACKED = 0x0d,
    MB_ID_CAN_ACK = 0x0d,
    MB_GIVE_TOKEN = 0x0e,
    MB_GIVE_BACK = 0x0f,
    MB_REGISTER = 0x03
} MB_PACKET_ID;

struct canAckMsg
{
    unsigned canId:12;
    unsigned index:4;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct canMsg
{
    unsigned canId:12;
    unsigned index:4;

    uint8_t data[8];
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct MotionCommand
{
    uint8_t traversalSpeed;
    uint8_t rotationalSpeed;
} __attribute__ ((packed)) __attribute__((__may_alias__));
# 5 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/mainboardstate.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h" 1
# 32 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 1
# 167 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
typedef enum IRQn
{

  NonMaskableInt_IRQn = -14,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,


  WWDG_IRQn = 0,
  PVD_IRQn = 1,
  TAMPER_IRQn = 2,
  RTC_IRQn = 3,
  FLASH_IRQn = 4,
  RCC_IRQn = 5,
  EXTI0_IRQn = 6,
  EXTI1_IRQn = 7,
  EXTI2_IRQn = 8,
  EXTI3_IRQn = 9,
  EXTI4_IRQn = 10,
  DMA1_Channel1_IRQn = 11,
  DMA1_Channel2_IRQn = 12,
  DMA1_Channel3_IRQn = 13,
  DMA1_Channel4_IRQn = 14,
  DMA1_Channel5_IRQn = 15,
  DMA1_Channel6_IRQn = 16,
  DMA1_Channel7_IRQn = 17,
# 244 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
  ADC1_2_IRQn = 18,
  USB_HP_CAN1_TX_IRQn = 19,
  USB_LP_CAN1_RX0_IRQn = 20,
  CAN1_RX1_IRQn = 21,
  CAN1_SCE_IRQn = 22,
  EXTI9_5_IRQn = 23,
  TIM1_BRK_IRQn = 24,
  TIM1_UP_IRQn = 25,
  TIM1_TRG_COM_IRQn = 26,
  TIM1_CC_IRQn = 27,
  TIM2_IRQn = 28,
  TIM3_IRQn = 29,
  TIM4_IRQn = 30,
  I2C1_EV_IRQn = 31,
  I2C1_ER_IRQn = 32,
  I2C2_EV_IRQn = 33,
  I2C2_ER_IRQn = 34,
  SPI1_IRQn = 35,
  SPI2_IRQn = 36,
  USART1_IRQn = 37,
  USART2_IRQn = 38,
  USART3_IRQn = 39,
  EXTI15_10_IRQn = 40,
  RTCAlarm_IRQn = 41,
  USBWakeUp_IRQn = 42
# 472 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
} IRQn_Type;





# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h" 1
# 132 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
typedef struct
{
  volatile uint32_t ISER[8];
       uint32_t RESERVED0[24];
  volatile uint32_t ICER[8];
       uint32_t RSERVED1[24];
  volatile uint32_t ISPR[8];
       uint32_t RESERVED2[24];
  volatile uint32_t ICPR[8];
       uint32_t RESERVED3[24];
  volatile uint32_t IABR[8];
       uint32_t RESERVED4[56];
  volatile uint8_t IP[240];
       uint32_t RESERVED5[644];
  volatile uint32_t STIR;
} NVIC_Type;







typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4];
  volatile const uint32_t ISAR[5];
} SCB_Type;
# 365 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 410 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32];
       uint32_t RESERVED0[864];
  volatile uint32_t TER;
       uint32_t RESERVED1[15];
  volatile uint32_t TPR;
       uint32_t RESERVED2[15];
  volatile uint32_t TCR;
       uint32_t RESERVED3[29];
  volatile uint32_t IWR;
  volatile uint32_t IRR;
  volatile uint32_t IMCR;
       uint32_t RESERVED4[43];
  volatile uint32_t LAR;
  volatile uint32_t LSR;
       uint32_t RESERVED5[6];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 503 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
typedef struct
{
       uint32_t RESERVED0;
  volatile const uint32_t ICTR;



       uint32_t RESERVED1;

} InterruptType_Type;
# 620 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1204 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void __enable_irq() { __asm volatile ("cpsie i"); }
static inline void __disable_irq() { __asm volatile ("cpsid i"); }

static inline void __enable_fault_irq() { __asm volatile ("cpsie f"); }
static inline void __disable_fault_irq() { __asm volatile ("cpsid f"); }

static inline void __NOP() { __asm volatile ("nop"); }
static inline void __WFI() { __asm volatile ("wfi"); }
static inline void __WFE() { __asm volatile ("wfe"); }
static inline void __SEV() { __asm volatile ("sev"); }
static inline void __ISB() { __asm volatile ("isb"); }
static inline void __DSB() { __asm volatile ("dsb"); }
static inline void __DMB() { __asm volatile ("dmb"); }
static inline void __CLREX() { __asm volatile ("clrex"); }
# 1227 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_PSP(void);
# 1237 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_PSP(uint32_t topOfProcStack);
# 1247 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_MSP(void);
# 1257 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_MSP(uint32_t topOfMainStack);
# 1266 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_BASEPRI(void);
# 1275 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_BASEPRI(uint32_t basePri);
# 1284 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_PRIMASK(void);
# 1293 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_PRIMASK(uint32_t priMask);
# 1302 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_FAULTMASK(void);
# 1311 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_FAULTMASK(uint32_t faultMask);
# 1320 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_CONTROL(void);
# 1329 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_CONTROL(uint32_t control);
# 1339 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __REV(uint32_t value);
# 1349 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __REV16(uint16_t value);
# 1359 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern int32_t __REVSH(int16_t value);
# 1369 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __RBIT(uint32_t value);
# 1379 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint8_t __LDREXB(uint8_t *addr);
# 1389 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint16_t __LDREXH(uint16_t *addr);
# 1399 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __LDREXW(uint32_t *addr);
# 1410 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
# 1421 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
# 1432 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
# 1468 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);

  reg_value = ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR;
  reg_value &= ~((0xFFFFul << 16) | (7ul << 8));
  reg_value = (reg_value |
                (0x5FA << 16) |
                (PriorityGroupTmp << 8));
  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR = reg_value;
}
# 1489 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (7ul << 8)) >> 8);
}
# 1502 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1515 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1529 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t) ((((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
}
# 1542 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1555 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1569 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)((((NVIC_Type *) ((0xE000E000) + 0x0100))->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
}
# 1586 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    ((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 4)) & 0xff); }
  else {
    ((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)] = ((priority << (8 - 4)) & 0xff); }
}
# 1609 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if(IRQn < 0) {
    return((uint32_t)(((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 4))); }
  else {
    return((uint32_t)(((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)] >> (8 - 4))); }
}
# 1634 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority & ((1 << (SubPriorityBits )) - 1)))
         );
}
# 1665 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
  *pSubPriority = (Priority ) & ((1 << (SubPriorityBits )) - 1);
}
# 1694 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > (0xFFFFFFul << 0)) return (1);

  ((SysTick_Type *) ((0xE000E000) + 0x0010))->LOAD = (ticks & (0xFFFFFFul << 0)) - 1;
  NVIC_SetPriority (SysTick_IRQn, (1<<4) - 1);
  ((SysTick_Type *) ((0xE000E000) + 0x0010))->VAL = 0;
  ((SysTick_Type *) ((0xE000E000) + 0x0010))->CTRL = (1ul << 2) |
                   (1ul << 1) |
                   (1ul << 0);
  return (0);
}
# 1719 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SystemReset(void)
{
  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR = ((0x5FA << 16) |
                 (((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (7ul << 8)) |
                 (1ul << 2));
  __DSB();
  while(1);
}
# 1742 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
extern volatile int ITM_RxBuffer;
# 1756 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if ((((CoreDebug_Type *) (0xE000EDF0))->DEMCR & (1ul << 24)) &&
      (((ITM_Type *) (0xE0000000))->TCR & (1ul << 0)) &&
      (((ITM_Type *) (0xE0000000))->TER & (1ul << 0) ) )
  {
    while (((ITM_Type *) (0xE0000000))->PORT[0].u32 == 0);
    ((ITM_Type *) (0xE0000000))->PORT[0].u8 = (uint8_t) ch;
  }
  return (ch);
}
# 1778 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline int ITM_ReceiveChar (void) {
  int ch = -1;

  if (ITM_RxBuffer != 0x5AA55AA5) {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = 0x5AA55AA5;
  }

  return (ch);
}
# 1798 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline int ITM_CheckChar (void) {

  if (ITM_RxBuffer == 0x5AA55AA5) {
    return (0);
  } else {
    return (1);
  }
}
# 479 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h" 1
# 53 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
extern uint32_t SystemCoreClock;
# 79 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);
# 480 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 2







typedef int32_t s32;
typedef int16_t s16;
typedef int8_t s8;

typedef const int32_t sc32;
typedef const int16_t sc16;
typedef const int8_t sc8;

typedef volatile int32_t vs32;
typedef volatile int16_t vs16;
typedef volatile int8_t vs8;

typedef volatile const int32_t vsc32;
typedef volatile const int16_t vsc16;
typedef volatile const int8_t vsc8;

typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t u8;

typedef const uint32_t uc32;
typedef const uint16_t uc16;
typedef const uint8_t uc8;

typedef volatile uint32_t vu32;
typedef volatile uint16_t vu16;
typedef volatile uint8_t vu8;

typedef volatile const uint32_t vuc32;
typedef volatile const uint16_t vuc16;
typedef volatile const uint8_t vuc8;

typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;

typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;


typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
# 542 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
typedef struct
{
  volatile uint32_t SR;
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SMPR1;
  volatile uint32_t SMPR2;
  volatile uint32_t JOFR1;
  volatile uint32_t JOFR2;
  volatile uint32_t JOFR3;
  volatile uint32_t JOFR4;
  volatile uint32_t HTR;
  volatile uint32_t LTR;
  volatile uint32_t SQR1;
  volatile uint32_t SQR2;
  volatile uint32_t SQR3;
  volatile uint32_t JSQR;
  volatile uint32_t JDR1;
  volatile uint32_t JDR2;
  volatile uint32_t JDR3;
  volatile uint32_t JDR4;
  volatile uint32_t DR;
} ADC_TypeDef;





typedef struct
{
  uint32_t RESERVED0;
  volatile uint16_t DR1;
  uint16_t RESERVED1;
  volatile uint16_t DR2;
  uint16_t RESERVED2;
  volatile uint16_t DR3;
  uint16_t RESERVED3;
  volatile uint16_t DR4;
  uint16_t RESERVED4;
  volatile uint16_t DR5;
  uint16_t RESERVED5;
  volatile uint16_t DR6;
  uint16_t RESERVED6;
  volatile uint16_t DR7;
  uint16_t RESERVED7;
  volatile uint16_t DR8;
  uint16_t RESERVED8;
  volatile uint16_t DR9;
  uint16_t RESERVED9;
  volatile uint16_t DR10;
  uint16_t RESERVED10;
  volatile uint16_t RTCCR;
  uint16_t RESERVED11;
  volatile uint16_t CR;
  uint16_t RESERVED12;
  volatile uint16_t CSR;
  uint16_t RESERVED13[5];
  volatile uint16_t DR11;
  uint16_t RESERVED14;
  volatile uint16_t DR12;
  uint16_t RESERVED15;
  volatile uint16_t DR13;
  uint16_t RESERVED16;
  volatile uint16_t DR14;
  uint16_t RESERVED17;
  volatile uint16_t DR15;
  uint16_t RESERVED18;
  volatile uint16_t DR16;
  uint16_t RESERVED19;
  volatile uint16_t DR17;
  uint16_t RESERVED20;
  volatile uint16_t DR18;
  uint16_t RESERVED21;
  volatile uint16_t DR19;
  uint16_t RESERVED22;
  volatile uint16_t DR20;
  uint16_t RESERVED23;
  volatile uint16_t DR21;
  uint16_t RESERVED24;
  volatile uint16_t DR22;
  uint16_t RESERVED25;
  volatile uint16_t DR23;
  uint16_t RESERVED26;
  volatile uint16_t DR24;
  uint16_t RESERVED27;
  volatile uint16_t DR25;
  uint16_t RESERVED28;
  volatile uint16_t DR26;
  uint16_t RESERVED29;
  volatile uint16_t DR27;
  uint16_t RESERVED30;
  volatile uint16_t DR28;
  uint16_t RESERVED31;
  volatile uint16_t DR29;
  uint16_t RESERVED32;
  volatile uint16_t DR30;
  uint16_t RESERVED33;
  volatile uint16_t DR31;
  uint16_t RESERVED34;
  volatile uint16_t DR32;
  uint16_t RESERVED35;
  volatile uint16_t DR33;
  uint16_t RESERVED36;
  volatile uint16_t DR34;
  uint16_t RESERVED37;
  volatile uint16_t DR35;
  uint16_t RESERVED38;
  volatile uint16_t DR36;
  uint16_t RESERVED39;
  volatile uint16_t DR37;
  uint16_t RESERVED40;
  volatile uint16_t DR38;
  uint16_t RESERVED41;
  volatile uint16_t DR39;
  uint16_t RESERVED42;
  volatile uint16_t DR40;
  uint16_t RESERVED43;
  volatile uint16_t DR41;
  uint16_t RESERVED44;
  volatile uint16_t DR42;
  uint16_t RESERVED45;
} BKP_TypeDef;





typedef struct
{
  volatile uint32_t TIR;
  volatile uint32_t TDTR;
  volatile uint32_t TDLR;
  volatile uint32_t TDHR;
} CAN_TxMailBox_TypeDef;





typedef struct
{
  volatile uint32_t RIR;
  volatile uint32_t RDTR;
  volatile uint32_t RDLR;
  volatile uint32_t RDHR;
} CAN_FIFOMailBox_TypeDef;





typedef struct
{
  volatile uint32_t FR1;
  volatile uint32_t FR2;
} CAN_FilterRegister_TypeDef;





typedef struct
{
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t TSR;
  volatile uint32_t RF0R;
  volatile uint32_t RF1R;
  volatile uint32_t IER;
  volatile uint32_t ESR;
  volatile uint32_t BTR;
  uint32_t RESERVED0[88];
  CAN_TxMailBox_TypeDef sTxMailBox[3];
  CAN_FIFOMailBox_TypeDef sFIFOMailBox[2];
  uint32_t RESERVED1[12];
  volatile uint32_t FMR;
  volatile uint32_t FM1R;
  uint32_t RESERVED2;
  volatile uint32_t FS1R;
  uint32_t RESERVED3;
  volatile uint32_t FFA1R;
  uint32_t RESERVED4;
  volatile uint32_t FA1R;
  uint32_t RESERVED5[8];

  CAN_FilterRegister_TypeDef sFilterRegister[14];



} CAN_TypeDef;




typedef struct
{
  volatile uint32_t CFGR;
  volatile uint32_t OAR;
  volatile uint32_t PRES;
  volatile uint32_t ESR;
  volatile uint32_t CSR;
  volatile uint32_t TXD;
  volatile uint32_t RXD;
} CEC_TypeDef;





typedef struct
{
  volatile uint32_t DR;
  volatile uint8_t IDR;
  uint8_t RESERVED0;
  uint16_t RESERVED1;
  volatile uint32_t CR;
} CRC_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SWTRIGR;
  volatile uint32_t DHR12R1;
  volatile uint32_t DHR12L1;
  volatile uint32_t DHR8R1;
  volatile uint32_t DHR12R2;
  volatile uint32_t DHR12L2;
  volatile uint32_t DHR8R2;
  volatile uint32_t DHR12RD;
  volatile uint32_t DHR12LD;
  volatile uint32_t DHR8RD;
  volatile uint32_t DOR1;
  volatile uint32_t DOR2;



} DAC_TypeDef;





typedef struct
{
  volatile uint32_t IDCODE;
  volatile uint32_t CR;
}DBGMCU_TypeDef;





typedef struct
{
  volatile uint32_t CCR;
  volatile uint32_t CNDTR;
  volatile uint32_t CPAR;
  volatile uint32_t CMAR;
} DMA_Channel_TypeDef;

typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
} DMA_TypeDef;





typedef struct
{
  volatile uint32_t MACCR;
  volatile uint32_t MACFFR;
  volatile uint32_t MACHTHR;
  volatile uint32_t MACHTLR;
  volatile uint32_t MACMIIAR;
  volatile uint32_t MACMIIDR;
  volatile uint32_t MACFCR;
  volatile uint32_t MACVLANTR;
       uint32_t RESERVED0[2];
  volatile uint32_t MACRWUFFR;
  volatile uint32_t MACPMTCSR;
       uint32_t RESERVED1[2];
  volatile uint32_t MACSR;
  volatile uint32_t MACIMR;
  volatile uint32_t MACA0HR;
  volatile uint32_t MACA0LR;
  volatile uint32_t MACA1HR;
  volatile uint32_t MACA1LR;
  volatile uint32_t MACA2HR;
  volatile uint32_t MACA2LR;
  volatile uint32_t MACA3HR;
  volatile uint32_t MACA3LR;
       uint32_t RESERVED2[40];
  volatile uint32_t MMCCR;
  volatile uint32_t MMCRIR;
  volatile uint32_t MMCTIR;
  volatile uint32_t MMCRIMR;
  volatile uint32_t MMCTIMR;
       uint32_t RESERVED3[14];
  volatile uint32_t MMCTGFSCCR;
  volatile uint32_t MMCTGFMSCCR;
       uint32_t RESERVED4[5];
  volatile uint32_t MMCTGFCR;
       uint32_t RESERVED5[10];
  volatile uint32_t MMCRFCECR;
  volatile uint32_t MMCRFAECR;
       uint32_t RESERVED6[10];
  volatile uint32_t MMCRGUFCR;
       uint32_t RESERVED7[334];
  volatile uint32_t PTPTSCR;
  volatile uint32_t PTPSSIR;
  volatile uint32_t PTPTSHR;
  volatile uint32_t PTPTSLR;
  volatile uint32_t PTPTSHUR;
  volatile uint32_t PTPTSLUR;
  volatile uint32_t PTPTSAR;
  volatile uint32_t PTPTTHR;
  volatile uint32_t PTPTTLR;
       uint32_t RESERVED8[567];
  volatile uint32_t DMABMR;
  volatile uint32_t DMATPDR;
  volatile uint32_t DMARPDR;
  volatile uint32_t DMARDLAR;
  volatile uint32_t DMATDLAR;
  volatile uint32_t DMASR;
  volatile uint32_t DMAOMR;
  volatile uint32_t DMAIER;
  volatile uint32_t DMAMFBOCR;
       uint32_t RESERVED9[9];
  volatile uint32_t DMACHTDR;
  volatile uint32_t DMACHRDR;
  volatile uint32_t DMACHTBAR;
  volatile uint32_t DMACHRBAR;
} ETH_TypeDef;





typedef struct
{
  volatile uint32_t IMR;
  volatile uint32_t EMR;
  volatile uint32_t RTSR;
  volatile uint32_t FTSR;
  volatile uint32_t SWIER;
  volatile uint32_t PR;
} EXTI_TypeDef;





typedef struct
{
  volatile uint32_t ACR;
  volatile uint32_t KEYR;
  volatile uint32_t OPTKEYR;
  volatile uint32_t SR;
  volatile uint32_t CR;
  volatile uint32_t AR;
  volatile uint32_t RESERVED;
  volatile uint32_t OBR;
  volatile uint32_t WRPR;
# 920 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
} FLASH_TypeDef;





typedef struct
{
  volatile uint16_t RDP;
  volatile uint16_t USER;
  volatile uint16_t Data0;
  volatile uint16_t Data1;
  volatile uint16_t WRP0;
  volatile uint16_t WRP1;
  volatile uint16_t WRP2;
  volatile uint16_t WRP3;
} OB_TypeDef;





typedef struct
{
  volatile uint32_t BTCR[8];
} FSMC_Bank1_TypeDef;





typedef struct
{
  volatile uint32_t BWTR[7];
} FSMC_Bank1E_TypeDef;





typedef struct
{
  volatile uint32_t PCR2;
  volatile uint32_t SR2;
  volatile uint32_t PMEM2;
  volatile uint32_t PATT2;
  uint32_t RESERVED0;
  volatile uint32_t ECCR2;
} FSMC_Bank2_TypeDef;





typedef struct
{
  volatile uint32_t PCR3;
  volatile uint32_t SR3;
  volatile uint32_t PMEM3;
  volatile uint32_t PATT3;
  uint32_t RESERVED0;
  volatile uint32_t ECCR3;
} FSMC_Bank3_TypeDef;





typedef struct
{
  volatile uint32_t PCR4;
  volatile uint32_t SR4;
  volatile uint32_t PMEM4;
  volatile uint32_t PATT4;
  volatile uint32_t PIO4;
} FSMC_Bank4_TypeDef;





typedef struct
{
  volatile uint32_t CRL;
  volatile uint32_t CRH;
  volatile uint32_t IDR;
  volatile uint32_t ODR;
  volatile uint32_t BSRR;
  volatile uint32_t BRR;
  volatile uint32_t LCKR;
} GPIO_TypeDef;





typedef struct
{
  volatile uint32_t EVCR;
  volatile uint32_t MAPR;
  volatile uint32_t EXTICR[4];
  uint32_t RESERVED0;
  volatile uint32_t MAPR2;
} AFIO_TypeDef;




typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
  volatile uint16_t CR2;
  uint16_t RESERVED1;
  volatile uint16_t OAR1;
  uint16_t RESERVED2;
  volatile uint16_t OAR2;
  uint16_t RESERVED3;
  volatile uint16_t DR;
  uint16_t RESERVED4;
  volatile uint16_t SR1;
  uint16_t RESERVED5;
  volatile uint16_t SR2;
  uint16_t RESERVED6;
  volatile uint16_t CCR;
  uint16_t RESERVED7;
  volatile uint16_t TRISE;
  uint16_t RESERVED8;
} I2C_TypeDef;





typedef struct
{
  volatile uint32_t KR;
  volatile uint32_t PR;
  volatile uint32_t RLR;
  volatile uint32_t SR;
} IWDG_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CSR;
} PWR_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t CIR;
  volatile uint32_t APB2RSTR;
  volatile uint32_t APB1RSTR;
  volatile uint32_t AHBENR;
  volatile uint32_t APB2ENR;
  volatile uint32_t APB1ENR;
  volatile uint32_t BDCR;
  volatile uint32_t CSR;
# 1098 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
} RCC_TypeDef;





typedef struct
{
  volatile uint16_t CRH;
  uint16_t RESERVED0;
  volatile uint16_t CRL;
  uint16_t RESERVED1;
  volatile uint16_t PRLH;
  uint16_t RESERVED2;
  volatile uint16_t PRLL;
  uint16_t RESERVED3;
  volatile uint16_t DIVH;
  uint16_t RESERVED4;
  volatile uint16_t DIVL;
  uint16_t RESERVED5;
  volatile uint16_t CNTH;
  uint16_t RESERVED6;
  volatile uint16_t CNTL;
  uint16_t RESERVED7;
  volatile uint16_t ALRH;
  uint16_t RESERVED8;
  volatile uint16_t ALRL;
  uint16_t RESERVED9;
} RTC_TypeDef;





typedef struct
{
  volatile uint32_t POWER;
  volatile uint32_t CLKCR;
  volatile uint32_t ARG;
  volatile uint32_t CMD;
  volatile const uint32_t RESPCMD;
  volatile const uint32_t RESP1;
  volatile const uint32_t RESP2;
  volatile const uint32_t RESP3;
  volatile const uint32_t RESP4;
  volatile uint32_t DTIMER;
  volatile uint32_t DLEN;
  volatile uint32_t DCTRL;
  volatile const uint32_t DCOUNT;
  volatile const uint32_t STA;
  volatile uint32_t ICR;
  volatile uint32_t MASK;
  uint32_t RESERVED0[2];
  volatile const uint32_t FIFOCNT;
  uint32_t RESERVED1[13];
  volatile uint32_t FIFO;
} SDIO_TypeDef;





typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
  volatile uint16_t CR2;
  uint16_t RESERVED1;
  volatile uint16_t SR;
  uint16_t RESERVED2;
  volatile uint16_t DR;
  uint16_t RESERVED3;
  volatile uint16_t CRCPR;
  uint16_t RESERVED4;
  volatile uint16_t RXCRCR;
  uint16_t RESERVED5;
  volatile uint16_t TXCRCR;
  uint16_t RESERVED6;
  volatile uint16_t I2SCFGR;
  uint16_t RESERVED7;
  volatile uint16_t I2SPR;
  uint16_t RESERVED8;
} SPI_TypeDef;





typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
  volatile uint16_t CR2;
  uint16_t RESERVED1;
  volatile uint16_t SMCR;
  uint16_t RESERVED2;
  volatile uint16_t DIER;
  uint16_t RESERVED3;
  volatile uint16_t SR;
  uint16_t RESERVED4;
  volatile uint16_t EGR;
  uint16_t RESERVED5;
  volatile uint16_t CCMR1;
  uint16_t RESERVED6;
  volatile uint16_t CCMR2;
  uint16_t RESERVED7;
  volatile uint16_t CCER;
  uint16_t RESERVED8;
  volatile uint16_t CNT;
  uint16_t RESERVED9;
  volatile uint16_t PSC;
  uint16_t RESERVED10;
  volatile uint16_t ARR;
  uint16_t RESERVED11;
  volatile uint16_t RCR;
  uint16_t RESERVED12;
  volatile uint16_t CCR1;
  uint16_t RESERVED13;
  volatile uint16_t CCR2;
  uint16_t RESERVED14;
  volatile uint16_t CCR3;
  uint16_t RESERVED15;
  volatile uint16_t CCR4;
  uint16_t RESERVED16;
  volatile uint16_t BDTR;
  uint16_t RESERVED17;
  volatile uint16_t DCR;
  uint16_t RESERVED18;
  volatile uint16_t DMAR;
  uint16_t RESERVED19;
} TIM_TypeDef;





typedef struct
{
  volatile uint16_t SR;
  uint16_t RESERVED0;
  volatile uint16_t DR;
  uint16_t RESERVED1;
  volatile uint16_t BRR;
  uint16_t RESERVED2;
  volatile uint16_t CR1;
  uint16_t RESERVED3;
  volatile uint16_t CR2;
  uint16_t RESERVED4;
  volatile uint16_t CR3;
  uint16_t RESERVED5;
  volatile uint16_t GTPR;
  uint16_t RESERVED6;
} USART_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFR;
  volatile uint32_t SR;
} WWDG_TypeDef;
# 8297 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 1
# 28 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h"
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h" 1
# 32 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 1
# 33 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h" 2
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
typedef struct
{
  uint32_t ADC_Mode;



  FunctionalState ADC_ScanConvMode;



  FunctionalState ADC_ContinuousConvMode;



  uint32_t ADC_ExternalTrigConv;



  uint32_t ADC_DataAlign;


  uint8_t ADC_NbrOfChannel;


}ADC_InitTypeDef;
# 428 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
void ADC_DeInit(ADC_TypeDef* ADCx);
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct);
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct);
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState);
void ADC_ResetCalibration(ADC_TypeDef* ADCx);
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx);
void ADC_StartCalibration(ADC_TypeDef* ADCx);
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx);
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx);
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number);
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);
uint32_t ADC_GetDualModeConversionValue(void);
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv);
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx);
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length);
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset);
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel);
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold, uint16_t LowThreshold);
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);
void ADC_TempSensorVrefintCmd(FunctionalState NewState);
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT);
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT);
# 29 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h" 1
# 165 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
void BKP_DeInit(void);
void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel);
void BKP_TamperPinCmd(FunctionalState NewState);
void BKP_ITConfig(FunctionalState NewState);
void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource);
void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue);
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data);
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR);
FlagStatus BKP_GetFlagStatus(void);
void BKP_ClearFlag(void);
ITStatus BKP_GetITStatus(void);
void BKP_ClearITPendingBit(void);
# 30 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h" 1
# 53 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h"
typedef struct
{
  uint16_t CAN_Prescaler;


  uint8_t CAN_Mode;



  uint8_t CAN_SJW;





  uint8_t CAN_BS1;



  uint8_t CAN_BS2;




  FunctionalState CAN_TTCM;



  FunctionalState CAN_ABOM;



  FunctionalState CAN_AWUM;



  FunctionalState CAN_NART;



  FunctionalState CAN_RFLM;



  FunctionalState CAN_TXFP;


} CAN_InitTypeDef;





typedef struct
{
  uint16_t CAN_FilterIdHigh;



  uint16_t CAN_FilterIdLow;



  uint16_t CAN_FilterMaskIdHigh;




  uint16_t CAN_FilterMaskIdLow;




  uint16_t CAN_FilterFIFOAssignment;


  uint8_t CAN_FilterNumber;

  uint8_t CAN_FilterMode;


  uint8_t CAN_FilterScale;


  FunctionalState CAN_FilterActivation;

} CAN_FilterInitTypeDef;





typedef struct
{
  uint32_t StdId;


  uint32_t ExtId;


  uint8_t IDE;



  uint8_t RTR;



  uint8_t DLC;



  uint8_t Data[8];

} CanTxMsg;





typedef struct
{
  uint32_t StdId;


  uint32_t ExtId;


  uint8_t IDE;



  uint8_t RTR;



  uint8_t DLC;


  uint8_t Data[8];


  uint8_t FMI;


} CanRxMsg;
# 642 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h"
void CAN_DeInit(CAN_TypeDef* CANx);


uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct);
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct);
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct);
void CAN_SlaveStartBank(uint8_t CAN_BankNumber);
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState);
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState);


uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage);
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox);
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox);


void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage);
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber);
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber);



uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode);
uint8_t CAN_Sleep(CAN_TypeDef* CANx);
uint8_t CAN_WakeUp(CAN_TypeDef* CANx);


uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx);
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx);
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx);


void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState);
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG);
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG);
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT);
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT);
# 31 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h"
typedef struct
{
  uint16_t CEC_BitTimingMode;

  uint16_t CEC_BitPeriodMode;

}CEC_InitTypeDef;
# 177 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h"
void CEC_DeInit(void);
void CEC_Init(CEC_InitTypeDef* CEC_InitStruct);
void CEC_Cmd(FunctionalState NewState);
void CEC_ITConfig(FunctionalState NewState);
void CEC_OwnAddressConfig(uint8_t CEC_OwnAddress);
void CEC_SetPrescaler(uint16_t CEC_Prescaler);
void CEC_SendDataByte(uint8_t Data);
uint8_t CEC_ReceiveDataByte(void);
void CEC_StartOfMessage(void);
void CEC_EndOfMessageCmd(FunctionalState NewState);
FlagStatus CEC_GetFlagStatus(uint32_t CEC_FLAG);
void CEC_ClearFlag(uint32_t CEC_FLAG);
ITStatus CEC_GetITStatus(uint8_t CEC_IT);
void CEC_ClearITPendingBit(uint16_t CEC_IT);
# 32 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h" 1
# 70 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h"
void CRC_ResetDR(void);
uint32_t CRC_CalcCRC(uint32_t Data);
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength);
uint32_t CRC_GetCRC(void);
void CRC_SetIDRegister(uint8_t IDValue);
uint8_t CRC_GetIDRegister(void);
# 33 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
typedef struct
{
  uint32_t DAC_Trigger;


  uint32_t DAC_WaveGeneration;



  uint32_t DAC_LFSRUnmask_TriangleAmplitude;



  uint32_t DAC_OutputBuffer;

}DAC_InitTypeDef;
# 278 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
void DAC_DeInit(void);
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct);
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct);
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState);



void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState);
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState);
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState);
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState);
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data);
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data);
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1);
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel);
# 34 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h" 1
# 98 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h"
uint32_t DBGMCU_GetREVID(void);
uint32_t DBGMCU_GetDEVID(void);
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState);
# 35 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
typedef struct
{
  uint32_t DMA_PeripheralBaseAddr;

  uint32_t DMA_MemoryBaseAddr;

  uint32_t DMA_DIR;


  uint32_t DMA_BufferSize;



  uint32_t DMA_PeripheralInc;


  uint32_t DMA_MemoryInc;


  uint32_t DMA_PeripheralDataSize;


  uint32_t DMA_MemoryDataSize;


  uint32_t DMA_Mode;




  uint32_t DMA_Priority;


  uint32_t DMA_M2M;

}DMA_InitTypeDef;
# 410 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx);
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct);
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct);
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState);
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState);
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber);
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx);
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG);
void DMA_ClearFlag(uint32_t DMAy_FLAG);
ITStatus DMA_GetITStatus(uint32_t DMAy_IT);
void DMA_ClearITPendingBit(uint32_t DMAy_IT);
# 36 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h"
typedef enum
{
  EXTI_Mode_Interrupt = 0x00,
  EXTI_Mode_Event = 0x04
}EXTIMode_TypeDef;







typedef enum
{
  EXTI_Trigger_Rising = 0x08,
  EXTI_Trigger_Falling = 0x0C,
  EXTI_Trigger_Rising_Falling = 0x10
}EXTITrigger_TypeDef;
# 76 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h"
typedef struct
{
  uint32_t EXTI_Line;


  EXTIMode_TypeDef EXTI_Mode;


  EXTITrigger_TypeDef EXTI_Trigger;


  FunctionalState EXTI_LineCmd;

}EXTI_InitTypeDef;
# 158 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h"
void EXTI_DeInit(void);
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);
void EXTI_ClearFlag(uint32_t EXTI_Line);
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line);
void EXTI_ClearITPendingBit(uint32_t EXTI_Line);
# 37 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
typedef enum
{
  FLASH_BUSY = 1,
  FLASH_ERROR_PG,
  FLASH_ERROR_WRP,
  FLASH_COMPLETE,
  FLASH_TIMEOUT
}FLASH_Status;
# 368 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
void FLASH_SetLatency(uint32_t FLASH_Latency);
void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess);
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer);
void FLASH_Unlock(void);
void FLASH_Lock(void);
FLASH_Status FLASH_ErasePage(uint32_t Page_Address);
FLASH_Status FLASH_EraseAllPages(void);
FLASH_Status FLASH_EraseOptionBytes(void);
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data);
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages);
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState);
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY);
uint32_t FLASH_GetUserOptionByte(void);
uint32_t FLASH_GetWriteProtectionOptionByte(void);
FlagStatus FLASH_GetReadOutProtectionStatus(void);
FlagStatus FLASH_GetPrefetchBufferStatus(void);
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState);
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG);
void FLASH_ClearFlag(uint32_t FLASH_FLAG);
FLASH_Status FLASH_GetStatus(void);
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout);


void FLASH_UnlockBank1(void);
void FLASH_LockBank1(void);
FLASH_Status FLASH_EraseAllBank1Pages(void);
FLASH_Status FLASH_GetBank1Status(void);
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout);
# 38 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
typedef struct
{
  uint32_t FSMC_AddressSetupTime;




  uint32_t FSMC_AddressHoldTime;




  uint32_t FSMC_DataSetupTime;




  uint32_t FSMC_BusTurnAroundDuration;




  uint32_t FSMC_CLKDivision;



  uint32_t FSMC_DataLatency;







  uint32_t FSMC_AccessMode;

}FSMC_NORSRAMTimingInitTypeDef;





typedef struct
{
  uint32_t FSMC_Bank;


  uint32_t FSMC_DataAddressMux;



  uint32_t FSMC_MemoryType;



  uint32_t FSMC_MemoryDataWidth;


  uint32_t FSMC_BurstAccessMode;



  uint32_t FSMC_AsynchronousWait;



  uint32_t FSMC_WaitSignalPolarity;



  uint32_t FSMC_WrapMode;



  uint32_t FSMC_WaitSignalActive;




  uint32_t FSMC_WriteOperation;


  uint32_t FSMC_WaitSignal;



  uint32_t FSMC_ExtendedMode;


  uint32_t FSMC_WriteBurst;


  FSMC_NORSRAMTimingInitTypeDef* FSMC_ReadWriteTimingStruct;

  FSMC_NORSRAMTimingInitTypeDef* FSMC_WriteTimingStruct;
}FSMC_NORSRAMInitTypeDef;





typedef struct
{
  uint32_t FSMC_SetupTime;





  uint32_t FSMC_WaitSetupTime;





  uint32_t FSMC_HoldSetupTime;






  uint32_t FSMC_HiZSetupTime;




}FSMC_NAND_PCCARDTimingInitTypeDef;





typedef struct
{
  uint32_t FSMC_Bank;


  uint32_t FSMC_Waitfeature;


  uint32_t FSMC_MemoryDataWidth;


  uint32_t FSMC_ECC;


  uint32_t FSMC_ECCPageSize;


  uint32_t FSMC_TCLRSetupTime;



  uint32_t FSMC_TARSetupTime;



  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_CommonSpaceTimingStruct;

  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_AttributeSpaceTimingStruct;
}FSMC_NANDInitTypeDef;





typedef struct
{
  uint32_t FSMC_Waitfeature;


  uint32_t FSMC_TCLRSetupTime;



  uint32_t FSMC_TARSetupTime;




  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_CommonSpaceTimingStruct;

  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_AttributeSpaceTimingStruct;

  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_IOSpaceTimingStruct;
}FSMC_PCCARDInitTypeDef;
# 696 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank);
void FSMC_NANDDeInit(uint32_t FSMC_Bank);
void FSMC_PCCARDDeInit(void);
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct);
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct);
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct);
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct);
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct);
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct);
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState);
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState);
void FSMC_PCCARDCmd(FunctionalState NewState);
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState);
uint32_t FSMC_GetECC(uint32_t FSMC_Bank);
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState);
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT);
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT);
# 39 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h" 1
# 40 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
typedef struct
{
  uint32_t I2C_ClockSpeed;


  uint16_t I2C_Mode;


  uint16_t I2C_DutyCycle;


  uint16_t I2C_OwnAddress1;


  uint16_t I2C_Ack;


  uint16_t I2C_AcknowledgedAddress;

}I2C_InitTypeDef;
# 534 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
void I2C_DeInit(I2C_TypeDef* I2Cx);
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct);
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct);
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address);
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState);
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data);
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx);
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction);
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register);
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition);
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert);
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition);
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState);
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx);
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle);
# 645 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT);





uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx);





FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);





void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
# 41 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h" 1
# 116 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h"
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess);
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler);
void IWDG_SetReload(uint16_t Reload);
void IWDG_ReloadCounter(void);
void IWDG_Enable(void);
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG);
# 42 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h" 1
# 129 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h"
void PWR_DeInit(void);
void PWR_BackupAccessCmd(FunctionalState NewState);
void PWR_PVDCmd(FunctionalState NewState);
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel);
void PWR_WakeUpPinCmd(FunctionalState NewState);
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry);
void PWR_EnterSTANDBYMode(void);
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG);
void PWR_ClearFlag(uint32_t PWR_FLAG);
# 43 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h" 1
# 46 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
typedef struct
{
  uint32_t SYSCLK_Frequency;
  uint32_t HCLK_Frequency;
  uint32_t PCLK1_Frequency;
  uint32_t PCLK2_Frequency;
  uint32_t ADCCLK_Frequency;
}RCC_ClocksTypeDef;
# 647 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
void RCC_DeInit(void);
void RCC_HSEConfig(uint32_t RCC_HSE);
ErrorStatus RCC_WaitForHSEStartUp(void);
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue);
void RCC_HSICmd(FunctionalState NewState);
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul);
void RCC_PLLCmd(FunctionalState NewState);
# 667 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource);
uint8_t RCC_GetSYSCLKSource(void);
void RCC_HCLKConfig(uint32_t RCC_SYSCLK);
void RCC_PCLK1Config(uint32_t RCC_HCLK);
void RCC_PCLK2Config(uint32_t RCC_HCLK);
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState);


 void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource);




void RCC_ADCCLKConfig(uint32_t RCC_PCLK2);






void RCC_LSEConfig(uint8_t RCC_LSE);
void RCC_LSICmd(FunctionalState NewState);
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource);
void RCC_RTCCLKCmd(FunctionalState NewState);
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks);
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);





void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
void RCC_BackupResetCmd(FunctionalState NewState);
void RCC_ClockSecuritySystemCmd(FunctionalState NewState);
void RCC_MCOConfig(uint8_t RCC_MCO);
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG);
void RCC_ClearFlag(void);
ITStatus RCC_GetITStatus(uint8_t RCC_IT);
void RCC_ClearITPendingBit(uint8_t RCC_IT);
# 44 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h" 1
# 103 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h"
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState);
void RTC_EnterConfigMode(void);
void RTC_ExitConfigMode(void);
uint32_t RTC_GetCounter(void);
void RTC_SetCounter(uint32_t CounterValue);
void RTC_SetPrescaler(uint32_t PrescalerValue);
void RTC_SetAlarm(uint32_t AlarmValue);
uint32_t RTC_GetDivider(void);
void RTC_WaitForLastTask(void);
void RTC_WaitForSynchro(void);
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG);
void RTC_ClearFlag(uint16_t RTC_FLAG);
ITStatus RTC_GetITStatus(uint16_t RTC_IT);
void RTC_ClearITPendingBit(uint16_t RTC_IT);
# 45 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h" 1
# 46 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
typedef struct
{
  uint32_t SDIO_ClockEdge;


  uint32_t SDIO_ClockBypass;



  uint32_t SDIO_ClockPowerSave;



  uint32_t SDIO_BusWide;


  uint32_t SDIO_HardwareFlowControl;


  uint8_t SDIO_ClockDiv;


} SDIO_InitTypeDef;

typedef struct
{
  uint32_t SDIO_Argument;




  uint32_t SDIO_CmdIndex;

  uint32_t SDIO_Response;


  uint32_t SDIO_Wait;


  uint32_t SDIO_CPSM;


} SDIO_CmdInitTypeDef;

typedef struct
{
  uint32_t SDIO_DataTimeOut;

  uint32_t SDIO_DataLength;

  uint32_t SDIO_DataBlockSize;


  uint32_t SDIO_TransferDir;



  uint32_t SDIO_TransferMode;


  uint32_t SDIO_DPSM;


} SDIO_DataInitTypeDef;
# 483 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
void SDIO_DeInit(void);
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct);
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct);
void SDIO_ClockCmd(FunctionalState NewState);
void SDIO_SetPowerState(uint32_t SDIO_PowerState);
uint32_t SDIO_GetPowerState(void);
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState);
void SDIO_DMACmd(FunctionalState NewState);
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct);
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct);
uint8_t SDIO_GetCommandResponse(void);
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP);
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct);
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct);
uint32_t SDIO_GetDataCounter(void);
uint32_t SDIO_ReadData(void);
void SDIO_WriteData(uint32_t Data);
uint32_t SDIO_GetFIFOCount(void);
void SDIO_StartSDIOReadWait(FunctionalState NewState);
void SDIO_StopSDIOReadWait(FunctionalState NewState);
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode);
void SDIO_SetSDIOOperation(FunctionalState NewState);
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState);
void SDIO_CommandCompletionCmd(FunctionalState NewState);
void SDIO_CEATAITCmd(FunctionalState NewState);
void SDIO_SendCEATACmd(FunctionalState NewState);
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG);
void SDIO_ClearFlag(uint32_t SDIO_FLAG);
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT);
void SDIO_ClearITPendingBit(uint32_t SDIO_IT);
# 46 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
typedef struct
{
  uint16_t SPI_Direction;


  uint16_t SPI_Mode;


  uint16_t SPI_DataSize;


  uint16_t SPI_CPOL;


  uint16_t SPI_CPHA;


  uint16_t SPI_NSS;



  uint16_t SPI_BaudRatePrescaler;





  uint16_t SPI_FirstBit;


  uint16_t SPI_CRCPolynomial;
}SPI_InitTypeDef;





typedef struct
{

  uint16_t I2S_Mode;


  uint16_t I2S_Standard;


  uint16_t I2S_DataFormat;


  uint16_t I2S_MCLKOutput;


  uint32_t I2S_AudioFreq;


  uint16_t I2S_CPOL;

}I2S_InitTypeDef;
# 446 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
void SPI_I2S_DeInit(SPI_TypeDef* SPIx);
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct);
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct);
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct);
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct);
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize);
void SPI_TransmitCRC(SPI_TypeDef* SPIx);
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState);
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC);
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx);
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction);
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
# 47 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h" 1
# 51 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
typedef struct
{
  uint16_t TIM_Prescaler;


  uint16_t TIM_CounterMode;


  uint16_t TIM_Period;



  uint16_t TIM_ClockDivision;


  uint8_t TIM_RepetitionCounter;







} TIM_TimeBaseInitTypeDef;





typedef struct
{
  uint16_t TIM_OCMode;


  uint16_t TIM_OutputState;


  uint16_t TIM_OutputNState;



  uint16_t TIM_Pulse;


  uint16_t TIM_OCPolarity;


  uint16_t TIM_OCNPolarity;



  uint16_t TIM_OCIdleState;



  uint16_t TIM_OCNIdleState;


} TIM_OCInitTypeDef;





typedef struct
{

  uint16_t TIM_Channel;


  uint16_t TIM_ICPolarity;


  uint16_t TIM_ICSelection;


  uint16_t TIM_ICPrescaler;


  uint16_t TIM_ICFilter;

} TIM_ICInitTypeDef;






typedef struct
{

  uint16_t TIM_OSSRState;


  uint16_t TIM_OSSIState;


  uint16_t TIM_LOCKLevel;


  uint16_t TIM_DeadTime;



  uint16_t TIM_Break;


  uint16_t TIM_BreakPolarity;


  uint16_t TIM_AutomaticOutput;

} TIM_BDTRInitTypeDef;
# 1054 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
void TIM_DeInit(TIM_TypeDef* TIMx);
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct);
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct);
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource);
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength);
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState);
void TIM_InternalClockConfig(TIM_TypeDef* TIMx);
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter);
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter);
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter);
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode);
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode);
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity);
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode);
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource);
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode);
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource);
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter);
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload);
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD);
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx);
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx);
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx);
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx);
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx);
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx);
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);
# 48 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
typedef struct
{
  uint32_t USART_BaudRate;




  uint16_t USART_WordLength;


  uint16_t USART_StopBits;


  uint16_t USART_Parity;






  uint16_t USART_Mode;


  uint16_t USART_HardwareFlowControl;


} USART_InitTypeDef;





typedef struct
{

  uint16_t USART_Clock;


  uint16_t USART_CPOL;


  uint16_t USART_CPHA;


  uint16_t USART_LastBit;


} USART_ClockInitTypeDef;
# 365 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
void USART_DeInit(USART_TypeDef* USARTx);
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct);
void USART_StructInit(USART_InitTypeDef* USART_InitStruct);
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct);
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct);
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address);
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp);
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength);
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data);
uint16_t USART_ReceiveData(USART_TypeDef* USARTx);
void USART_SendBreak(USART_TypeDef* USARTx);
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime);
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler);
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode);
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState);
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
# 49 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h" 1
# 88 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h"
void WWDG_DeInit(void);
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler);
void WWDG_SetWindowValue(uint8_t WindowValue);
void WWDG_EnableIT(void);
void WWDG_SetCounter(uint8_t Counter);
void WWDG_Enable(uint8_t Counter);
FlagStatus WWDG_GetFlagStatus(void);
void WWDG_ClearFlag(void);
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/misc.h" 1
# 50 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/misc.h"
typedef struct
{
  uint8_t NVIC_IRQChannel;




  uint8_t NVIC_IRQChannelPreemptionPriority;



  uint8_t NVIC_IRQChannelSubPriority;



  FunctionalState NVIC_IRQChannelCmd;


} NVIC_InitTypeDef;
# 196 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/misc.h"
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset);
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState);
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
# 51 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h" 2
# 59 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/stm32f10x_conf.h"
void assert_failed(uint8_t* file, uint32_t line);
# 8298 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 2
# 33 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h" 2
# 58 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
typedef enum
{
  GPIO_Speed_10MHz = 1,
  GPIO_Speed_2MHz,
  GPIO_Speed_50MHz
}GPIOSpeed_TypeDef;







typedef enum
{ GPIO_Mode_AIN = 0x0,
  GPIO_Mode_IN_FLOATING = 0x04,
  GPIO_Mode_IPD = 0x28,
  GPIO_Mode_IPU = 0x48,
  GPIO_Mode_Out_OD = 0x14,
  GPIO_Mode_Out_PP = 0x10,
  GPIO_Mode_AF_OD = 0x1C,
  GPIO_Mode_AF_PP = 0x18
}GPIOMode_TypeDef;
# 91 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
typedef struct
{
  uint16_t GPIO_Pin;


  GPIOSpeed_TypeDef GPIO_Speed;


  GPIOMode_TypeDef GPIO_Mode;

}GPIO_InitTypeDef;






typedef enum
{ Bit_RESET = 0,
  Bit_SET
}BitAction;
# 349 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
void GPIO_DeInit(GPIO_TypeDef* GPIOx);
void GPIO_AFIODeInit(void);
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct);
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx);
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal);
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal);
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);
void GPIO_EventOutputCmd(FunctionalState NewState);
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState);
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface);
# 6 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/mainboardstate.h" 2

enum COMSTATES {
    COM_RUNNING,
    COM_OFFLINE,
    COM_ZOMBIE
};



enum MAINBOARDERROR{
    MAINBOARD_NOERROR,
    MAINBOARD_HBRIDGE_ERROR,
    MAINBOARD_CAN_ERROR,
    MAINBOARD_WRONG_STATE_ERROR
};

struct MainboardState
{

    uint8_t (*enterStateHandler)(void);


    void (*stateHandler)(void);
};


void mbstate_init();






uint8_t mbstate_changeState(enum MAINBOARDSTATE newState);




enum MAINBOARDSTATE mbstate_getCurrentState();




void mbstate_processState();






struct MainboardState *mbstate_getState(enum MAINBOARDSTATE state);




void mbstate_setBlinkLed(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
# 4 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/packethandling.h" 1




typedef void (*packet_callback_t)(int senderId, int receiverId, int id, unsigned char *data, unsigned short size);

void packet_init();

void packet_registerHandler(int id, packet_callback_t callback);
void packet_handlePacket(int senderId, int receiverId, int id, unsigned char *data, unsigned short size);

void packet_setStateHandler(int senderId, int receiverId, int id, unsigned char *data, unsigned short size);
uint16_t packet_getPacketsInLastSecond();
# 5 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_packet.h" 1



# 1 "/usr/include/inttypes.h" 1 3 4
# 34 "/usr/include/inttypes.h" 3 4
typedef int __gwchar_t;
# 266 "/usr/include/inttypes.h" 3 4





typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/inttypes.h" 3 4

# 5 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_packet.h" 2
# 33 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_packet.h"
typedef enum {
    REQUESTED = 0,
    TIMEOUT = 1,
    INITIAL = 2,
    ILLEGAL = 3,
} MODE_CHANGE_REASON;


typedef enum {
    OFF = 0x00,
    HALT = 0x01,
    RUNNING = 0x02,
    AUTONOMOUS = 0x03,
    EMERGENCY = 0x04,
    FULL_AUTONOMOUS = 0x05,
    SURFACE = 0x06,
    UNDEFINED = 0xff
} ARC_SYSTEM_STATE;



typedef enum {
    REGISTER_CHANCE = 0x00,
    OCU = 0x01,
    ASV = 0x02,
    AVALON = 0x03
} ARC_SYSTEM_ID;





typedef enum {
    MASTER = 0,
    SLAVE = 1,
} ARC_ORIGINATOR_FLAG;

typedef MB_PACKET_ID ARC_PACKET_ID;





typedef struct {
    ARC_SYSTEM_STATE current_state;
    ARC_SYSTEM_STATE wanted_state;
} arc_status_packet_t;

typedef struct {
    uint8_t sync;
    ARC_ORIGINATOR_FLAG originator;
    ARC_SYSTEM_ID system_id;
    ARC_PACKET_ID packet_id;
    uint8_t length;
    uint8_t data[16];
    uint8_t crc;
} arc_packet_t;
# 98 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_packet.h"
int16_t parsePacket(const uint8_t *buffer, uint16_t buffer_length, arc_packet_t *packet);
# 108 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_packet.h"
uint16_t createPacket(const arc_packet_t *packet, uint8_t *buffer);

arc_packet_t createTokenPacket();
# 6 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/time.h" 1






unsigned int time_getTimeInMs();




void time_msPassed();
# 7 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/timeout.h" 1
# 11 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/timeout.h"
void timeout_init(int timeoutInMs);




void timeout_reset();





uint8_t timeout_hasTimeout();
# 8 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_tokendriver.h" 1


# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_packet.h" 1
# 4 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_tokendriver.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_driver.h" 1



# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_driver.h" 1
# 5 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_driver.h" 2
typedef signed int (*arc_send_func_t)(const unsigned char *data, const unsigned int size);
typedef signed int (*arc_recv_func_t)(unsigned char *data, const unsigned int dataSize);
typedef signed int (*arc_seek_func_t)(unsigned char *data, const unsigned int dataSize);




uint32_t arc_sendPacketDirect(arc_packet_t* packet);




int arc_init(arc_send_func_t sendFunc, arc_recv_func_t recvFunc, arc_seek_func_t seekFunc);





uint32_t arc_readPacket(arc_packet_t * packet);
uint32_t arc_readPacketChannel(arc_packet_t * packet, int channel);





int arc_sendPacket(arc_packet_t *packet);
int arc_sendPacketiChannel(arc_packet_t *packet, int channel);

int arc_add_serial_handler(arc_send_func_t sendFunc, arc_recv_func_t recvFunc, arc_seek_func_t seekFunc);







int arc_send(uint8_t *tmp_send_buffer, int size);
int arc_sendChannel(uint8_t *tmp_send_buffer, int size, int channel);
# 5 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_tokendriver.h" 2
int arctoken_init(arc_send_func_t sendFunc, arc_recv_func_t recvFunc, arc_seek_func_t seekFunc);
int arctoken_readPacket(arc_packet_t* packet);
int arctoken_sendPacket(arc_packet_t* packet);
int arctoken_add_serial_handler(arc_send_func_t sendFunc, arc_recv_func_t recvFunc, arc_seek_func_t seekFunc);
void arctoken_processPackets();
void arctoken_sendProtocolPacket(ARC_PACKET_ID id);
void arctoken_setOwnSystemID(ARC_SYSTEM_ID sys_id);
ARC_SYSTEM_ID arctoken_getOwnSystemID();
# 9 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/hbridge_cmd2.h" 1




# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/../common/packets.h" 1




# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/../common/pid.h" 1





struct setPidData {
  int16_t kp;
  int16_t ki;
  int16_t kd;
  int16_t minMaxPidOutput;
} __attribute__ ((packed)) __attribute__((__may_alias__)) ;

struct pidDebugData {
  int16_t pPart;
  int16_t iPart;
  int16_t dPart;
  uint16_t minMaxPidOutput;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct pid_data {
    int32_t kp;
    int32_t ki;
    int32_t kd;
    int32_t target_val;
    int32_t last_error;
    int32_t max_command_val;
    int32_t min_command_val;
    int32_t error_sum;
    int32_t pPart;
    int32_t iPart;
    int32_t dPart;
};




void setPidConfiguration(struct pid_data *data, const struct setPidData *config);






void setMinMaxCommandVal(struct pid_data *data, int32_t min, int32_t max);






void setKp(struct pid_data *data, int32_t kp);






void setKi(struct pid_data *data, int32_t ki);






void setKd(struct pid_data *data, int32_t kd);






void resetPIDStruct(struct pid_data *data);

void setTargetValue(struct pid_data *data, int32_t target_val);

int32_t pid(struct pid_data *data, int32_t cur_val);

void getPidDebugData(const struct pid_data *data, struct pidDebugData *debug);

void initPIDStruct(struct pid_data *data);
# 6 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/../common/packets.h" 2




enum STATES
{
    STATE_UNCONFIGURED,
    STATE_SENSOR_ERROR,
    STATE_SENSORS_CONFIGURED,
    STATE_ACTUATOR_ERROR,
    STATE_ACTUATOR_CONFIGURED,
    STATE_CONTROLLER_CONFIGURED,
    STATE_RUNNING,
};

enum HIGH_PRIORITY_IDs
{
    PACKET_ID_EMERGENCY_STOP,
    PACKET_ID_SET_ALLOWED_SENDER,
    PACKET_ID_ERROR,
    PACKET_ID_ANNOUNCE_STATE,
    PACKET_ID_STATUS,
    PACKET_ID_EXTENDED_STATUS,
    PACKET_ID_ACK,

    PACKET_ID_SET_VALUE,
    PACKET_ID_SET_VALUE14,
    PACKET_ID_SET_VALUE58,

    PACKET_LOW_PRIORITY_DATA,
};

enum LOW_PRIORITY_IDs
{





    PACKET_ID_LOWIDS_START = PACKET_LOW_PRIORITY_DATA,

    PACKET_ID_SET_SENSOR_CONFIG,
    PACKET_ID_CLEAR_SENSOR_ERROR,
    PACKET_ID_SET_ACTUATOR_CONFIG,
    PACKET_ID_CLEAR_ACTUATOR_ERROR,
    PACKET_ID_SET_ACTIVE_CONTROLLER,

    PACKET_ID_REQUEST_STATE,

    PACKET_ID_REQUEST_SENSOR_CONFIG,
    PACKET_ID_ANNOUNCE_SENSOR_CONFIG,

    PACKED_ID_REQUEST_VERSION,
    PACKED_ID_ANNOUNCE_VERSION,

    PACKET_ID_SET_SPEED_CONTROLLER_DATA,
    PACKET_ID_SPEED_CONTROLLER_DEBUG,

    PACKET_ID_POS_CONTROLLER_DEBUG,
    PACKET_ID_SET_POS_CONTROLLER_DATA,

    PACKET_ID_SET_UNCONFIGURED,
    PACKET_ID_SET_ACTUATOR_UNCONFIGURED,







    PACKET_ID_TOTAL_COUNT,
};

enum encoderTypes {
    NO_ENCODER = 0,
    QUADRATURE,
    QUADRATURE_WITH_ZERO,
    IC_HOUSE_MH_Y,
    BMMV30_SSI,
    ANALOG_VOLTAGE,
    END_SWITCH,
    NUM_ENCODERS,
};

enum controllerModes {
  CONTROLLER_MODE_NONE = 0,
  CONTROLLER_MODE_PWM = 1,
  CONTROLLER_MODE_SPEED = 2,
  CONTROLLER_MODE_POSITION = 3,
  NUM_CONTROLLERS
};

enum controllerInputEncoder {
    INTERNAL = 0,
    EXTERNAL = 1,
};

struct ackData {
    unsigned short packetId;
    unsigned short crc;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct announceStateData {
    enum STATES curState:8;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct announceVersionData {
    uint8_t major;
    uint16_t minor;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct setAllowedSenderData {
# 129 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/../common/packets.h"
    uint8_t onlyMainboard;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct encoderConfiguration {
    enum encoderTypes encoderType:8;
    uint32_t ticksPerTurn;


    uint32_t leapTickCounter;
    int32_t zeroOffset;
    uint8_t tickDivider;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct sensorConfig
{
    unsigned externalTempSensor :1;
    uint16_t statusEveryMs;
    struct encoderConfiguration encoder1Config;
    struct encoderConfiguration encoder2Config;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct actuatorConfig
{
  unsigned openCircuit :1;
  enum controllerInputEncoder controllerInputEncoder :1;
  unsigned unused :6;
  uint8_t maxMotorTemp;
  uint8_t maxMotorTempCount;
  uint8_t maxBoardTemp;
  uint8_t maxBoardTempCount;
  uint16_t timeout;
  uint16_t maxCurrent;
  uint8_t maxCurrentCount;
  uint16_t pwmStepPerMs;
} __attribute__ ((packed)) __attribute__((__may_alias__));


struct speedDebugData {
  int16_t targetVal;
  int16_t pwmVal;
  int32_t encoderVal;
  int16_t speedVal;
  struct pidDebugData pidData;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct posDebugData {
  uint16_t targetVal;
  int16_t pwmVal;
  uint16_t encoderVal;
  uint16_t posVal;
  struct pidDebugData pidData;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct speedControllerData {
    unsigned debugActive:1;
    unsigned unused:7;
    struct setPidData pidData;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct posControllerData {
    uint16_t minHystDist;
    uint16_t maxHystDist;
    unsigned hysteresisActive:1;
    unsigned allowWrapAround:1;
    unsigned debugActive:1;
    unsigned unused:5;
    uint8_t overDistCount;
    struct setPidData pidData;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct errorData {
    uint8_t temperature;
    uint16_t position;
    unsigned index :10;
    unsigned externalPosition:12;
    unsigned motorOverheated:1;
    unsigned boardOverheated:1;
    unsigned overCurrent:1;
    unsigned timeout:1;
    unsigned badConfig:1;
    unsigned encodersNotInitalized:1;
    unsigned hardwareShutdown:1;
    unsigned unused:3;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct statusData {
  signed pwm :12;
  unsigned externalPosition:12;
  uint16_t position;
  unsigned currentValue :14;
  unsigned index :10;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct extendedStatusData {
    uint8_t temperature;
    uint8_t motorTemperature;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct setValueData {
  int16_t board1Value;
  int16_t board2Value;
  int16_t board3Value;
  int16_t board4Value;
} __attribute__ ((packed)) __attribute__((__may_alias__));

struct setActiveControllerData {
  enum controllerModes controllerId:8;
} __attribute__ ((packed)) __attribute__((__may_alias__));

enum LOW_PRIO_TYPE
{

    TYPE_HEADER = 0,







    TYPE_DATA,
};

struct LowPrioHeader
{
    enum LOW_PRIORITY_IDs id:8;


    uint8_t size;

    uint16_t crc;


} __attribute__ ((packed)) __attribute__((__may_alias__));

struct LowPrioPacket
{
    enum LOW_PRIO_TYPE type:2;
    unsigned sequenceNumber:6;
} __attribute__ ((packed)) __attribute__((__may_alias__));

const char *getPacketName(uint16_t packetId);
const char *getStateName(enum STATES state);
# 6 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/hbridge_cmd2.h" 2



void hbridge_init(uint16_t numHbridges);

uint8_t hbridge_getControlledHbridges();
# 20 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/hbridge_cmd2.h"
void hbridge_setControllerWithData(const uint16_t hbridgeId, enum controllerModes controller, const int packetId, const char *data, const uint8_t dataSize);






void hbridge_process();





struct sensorConfig *getSensorConfig(uint16_t hbridgeNr);

void hbridge_requestStates();
enum STATES hbridge_getState(uint16_t hbridgeNr);
enum STATES hbridge_getLowestHBState();

uint8_t hbridge_configureSensors();

uint8_t hbridge_sensorsConfigured();





struct actuatorConfig *getActuatorConfig(uint16_t hbridgeNr);






uint8_t hbridge_configureActuators();

uint8_t hbridge_actuatorsConfigured();
uint8_t hbridge_configureControllers();





uint8_t hbridge_hasActuatorError();





uint8_t hbridge_hasSensorError();

void hbridge_resetActuators();
void hbridge_resetSensors();
# 10 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/hbridge_cmd.h" 1


# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/packets.h" 1
# 4 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/hbridge_cmd.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/protocol.h" 1





enum hostIDs {
    RECEIVER_ID_ALL = 0,
    RECEIVER_ID_MAINBOARD,
    RECEIVER_ID_PC,
    RECEIVER_ID_H_BRIDGE_1,
    RECEIVER_ID_H_BRIDGE_2,
    RECEIVER_ID_H_BRIDGE_3,
    RECEIVER_ID_H_BRIDGE_4,
    RECEIVER_ID_H_BRIDGE_5,
    RECEIVER_ID_H_BRIDGE_6,
    RECEIVER_ID_H_BRIDGE_7,
    RECEIVER_ID_H_BRIDGE_8,
    SENDER_ID_MAINBOARD = RECEIVER_ID_MAINBOARD,
    SENDER_ID_PC,
    SENDER_ID_H_BRIDGE,
    SENDER_ID_H_BRIDGE_1 = RECEIVER_ID_H_BRIDGE_1,
    SENDER_ID_H_BRIDGE_2,
    SENDER_ID_H_BRIDGE_3,
    SENDER_ID_H_BRIDGE_4,
    SENDER_ID_H_BRIDGE_5,
    SENDER_ID_H_BRIDGE_6,
    SENDER_ID_H_BRIDGE_7,
    SENDER_ID_H_BRIDGE_8,
};





void protocol_init(int isMaster);




enum hostIDs protocol_getOwnHostId();

typedef void (*protocol_callback_t)(int senderId, int receiverId, int id, unsigned char *data, unsigned short size);







void protocol_registerHandler(int id, protocol_callback_t handler);





uint8_t protocol_sendData(int receiverId, int id, const unsigned char* data, short unsigned int size);
# 65 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/protocol.h"
void protocol_checkCallHandler(int senderId, int receiverId, int id, unsigned char *data, unsigned short size);
# 75 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/protocol.h"
uint8_t protocol_getMaxPacketSize();

typedef signed int (*send_func_t)(uint16_t senderId, uint16_t receiverId, uint16_t packetId, const unsigned char *data, const unsigned int size);
typedef signed int (*recv_func_t)(uint16_t *senderId, uint16_t *receiverId, uint16_t *packetId, unsigned char *data, const unsigned int dataSize);


void protocol_setSendFunc(send_func_t func);
void protocol_setRecvFunc(recv_func_t func);




void protocol_setMaxPacketSize(uint8_t maxPacketSize);

void protocol_setAllowedSender(enum hostIDs);




void protocol_setOwnHostId(enum hostIDs id);

void protocol_ackPacket(int id, int receiverId);





uint8_t protocol_processPackage();
# 5 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/hbridge_cmd.h" 2






void hbridge_sensorStructInit(struct sensorConfig *sc);






void hbridge_sendSensorConfiguration(enum hostIDs hbridgeId, struct sensorConfig *sc);






void hbridge_actuatorStructInit(struct actuatorConfig *ac);






void hbridge_sendActuatorConfiguration(enum hostIDs hbridgeId, struct actuatorConfig *ac);






void hbridge_controllerStructInit(struct setActiveControllerData *cd);






void hbridge_sendControllerConfiguration(enum hostIDs hbridgeId, struct setActiveControllerData *cd);
# 56 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/hbridge_cmd.h"
void hbridge_setValue( int16_t value1, int16_t value2, int16_t value3, int16_t value4);
void hbridge_setValues( int16_t value1, int16_t value2, int16_t value3, int16_t value4, enum HIGH_PRIORITY_IDs hbSet);





void hbridge_sendClearSensorError(enum hostIDs hbridgeId);





void hbridge_sendClearActuatorError(enum hostIDs hbridgeId);





void hbridge_requestState(enum hostIDs hbridgeId);





void hbridge_setUnconfigured(enum hostIDs hbridgeId);





void hbridge_setActuatorUnconfigured(enum hostIDs hbridgeId);






void hbridge_sendAllowedSenderConfiguration(enum hostIDs hbridgeId, int allAllowed);
# 11 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../common/protocol.h" 1
# 12 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../interfaces/thread.h" 1
# 13 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../interfaces/thread.h"
void startHardPeriodicThread(int frequency, void (*func)(void));
# 13 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/protocol_can.h" 1



void can_protocolInit();
# 14 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/can.h" 1



# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/common/packets.h" 1
# 5 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/common/protocol.h" 1
# 6 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/dagon/../../../firmware/hbridgeCommon/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h" 1
# 7 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/can.h" 2




enum CAN_REMAP {

    CAN_NO_REMAP,

    CAN_REMAP1,

    CAN_REMAP2
};

void CAN_Configuration(enum CAN_REMAP remap);
void CAN_CancelAllTransmits();

void CAN_ConfigureFilters(enum hostIDs boardNr);






CanRxMsg *CAN_GetNextData();




void CAN_MarkNextDataAsRead();






int can_send_message_hard(CanTxMsg * message);





unsigned char CAN_SendMessage(CanTxMsg* TxMessage);
# 15 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/usart.h" 1




enum USART_MODE
{
    USART_POLL,
    USART_USE_INTERRUPTS,
};







void USART1_Init(enum USART_MODE mode);




void USART1_DeInit(void);
# 32 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/usart.h"
signed int USART1_SendData(const unsigned char *data, const unsigned int size);
# 47 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/usart.h"
signed int USART1_GetData (unsigned char *buffer, const unsigned int buffer_length);
# 60 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/usart.h"
signed int USART1_SeekData (unsigned char *buffer, const unsigned int buffer_length);



void USART3_Init(enum USART_MODE mode, unsigned int speed);
void USART3_DeInit(void);
signed int USART3_SendData(const unsigned char *data, const unsigned int size);
signed int USART3_GetData (unsigned char *buffer, const unsigned int buffer_length);
signed int USART3_SeekData (unsigned char *buffer, const unsigned int buffer_length);

void USART2_Init(enum USART_MODE mode);

signed int USART2_SendData(const unsigned char *data, const unsigned int size);
signed int USART2_GetData (unsigned char *buffer, const unsigned int buffer_length);
signed int USART2_SeekData (unsigned char *buffer, const unsigned int buffer_length);
# 16 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/assert.h" 1





enum ASSERT_UASRT {
  USE_USART1,
  USE_USART3,
};

void Assert_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, enum ASSERT_UASRT used_usart);

void Assert_assert(int expr);
# 17 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../../hbridgeCommon/drivers/printf.h" 1





typedef signed int (*printf_send_func_t)(const unsigned char *, const unsigned int);





void printf_setSendFunction(printf_send_func_t function);

int printf(const char *format, ...);

void testprintf();
# 18 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 147 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 324 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef int wchar_t;
# 19 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_can.h" 2

int avaloncan_recvPacket(uint16_t *senderId, uint16_t *receiverId, uint16_t *packetId, unsigned char *data, const unsigned int dataSize);
void avaloncan_handlePacket(CanRxMsg *msg);
# 3 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c" 2





# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/../common/arc_driver.h" 1
# 9 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c" 2
# 18 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 19 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c" 2
# 1 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/avalon_types.h" 1


enum ChangeReason {
    CR_INITIAL,
    CR_MB_TIMEOUT,
    CR_HB_ERROR,
    CR_LEGAL,
    CR_EMERGENCY
};

typedef struct {
    ARC_SYSTEM_STATE current_state;
    ARC_SYSTEM_STATE wanted_state;
    int32_t current_depth;
    uint8_t water_ingress_front:1;
    uint8_t water_ingress_back:1;
    enum ChangeReason change_reason:3;
} __attribute__ ((packed)) __attribute__((__may_alias__)) avalon_status_t;

struct arc_avalon_control_packet{
    uint8_t dive;
    uint8_t strave;
    uint8_t left;
    uint8_t right;
    uint8_t pitch;
    uint8_t yaw;
} __attribute__ ((packed)) __attribute__((__may_alias__));
# 20 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c" 2



uint32_t lastStateTime;
uint8_t substate = 0;
# 37 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c"
avalon_status_t current_status;
void hbridgeStatusHandler(int senderId, int receiverId, int id, unsigned char *data, unsigned short size){
}
void hbridgeExtendedStatusHandler(int senderId, int receiverId, int id, unsigned char *data, unsigned short size){
}
int surface(){
    mbstate_changeState(MAINBOARD_OFF);
    current_status.change_reason = CR_EMERGENCY;
    return 0;
}

void sendStatusPacket(){
    CanTxMsg msg;
    msg.StdId = 0x541;
    msg.RTR=((uint32_t)0x00000000);
    msg.IDE=((uint32_t)0x00000000);
    msg.DLC = 8;
    msg.Data[2] =(ARC_SYSTEM_STATE)mbstate_getCurrentState();
    msg.Data[7] = substate;
    CAN_SendMessage(&msg);

    avalon_status_t status_information;
    status_information.current_state = (ARC_SYSTEM_STATE)mbstate_getCurrentState();
    status_information.wanted_state = current_status.wanted_state;
    status_information.current_depth = current_status.current_depth;
    status_information.water_ingress_front = current_status.water_ingress_front;
    status_information.water_ingress_back = current_status.water_ingress_back;
    status_information.change_reason = current_status.change_reason;
    arc_packet_t packet;
    packet.originator = SLAVE;
    packet.system_id = AVALON;
    packet.packet_id = MB_STATUS;
    packet.length = sizeof(avalon_status_t);
    int i;
    for (i=0; i<sizeof(avalon_status_t); i++){
        packet.data[i] = ((char*)&status_information)[i];
    }

    arc_sendPacket(&packet);
}
void avalon_packet_setStateHandler(int senderId, int receiverId, int id, unsigned char *data, unsigned short size){
    substate = data[1];
    packet_setStateHandler(senderId, receiverId, id, data, size);
}

void avalon_packet_canHandler(int senderId, int receiverId, int id, unsigned char *data, unsigned short size){
    timeout_reset();
    struct canMsg *inMsg = (struct canMsg*) data;
    const uint8_t payloadSize = size-2;
    CanTxMsg msg;
    msg.StdId = data[0];
    msg.StdId = (msg.StdId << 3) | (data[1]>>5);
    msg.RTR=((uint32_t)0x00000000);
    msg.IDE=((uint32_t)0x00000000);

    printf("Got A Can Passhrough and send it out with id %i\n", msg.StdId);
    printf("ARC letzten Byte %i", data[9]);
    msg.DLC = payloadSize;
    int i;

    for(i=0; i < payloadSize; i++) {
 msg.Data[i] = inMsg->data[i];
    }
    printf("CAN letztes Byte %i, %i, %i", msg.Data[7], inMsg->data[7], msg.DLC);



    CAN_SendMessage(&msg);

}
int status_loops = 0;
struct arc_avalon_control_packet curCmd;
uint8_t cmdValid;
void avalon_controlHandler(int senderId, int receiverId, int id, unsigned char *data, unsigned short size){
    timeout_reset();
    struct arc_avalon_control_packet *cmd = (struct arc_avalon_control_packet *) data;

    curCmd = *cmd;
    cmdValid = 1;
}
void avalon_autonomousState(void){
    if(timeout_hasTimeout())
    {
        printf("Timout, switching to off\n");
        mbstate_changeState(MAINBOARD_OFF);
        current_status.change_reason = CR_MB_TIMEOUT;
        timeout_reset();
        return;
    }
    current_status.change_reason = CR_LEGAL;

}
void avalon_offState(void){
    timeout_reset();
}
void avalon_runningState(void){


    if(timeout_hasTimeout())
    {
        printf("Timout, switching to off\n");
        mbstate_changeState(MAINBOARD_OFF);
        current_status.change_reason = CR_MB_TIMEOUT;
        timeout_reset();
        return;
    }


    if(hbridge_hasActuatorError())
    {
        printf("Actuator error, switching to off\n");
        mbstate_changeState(MAINBOARD_OFF);
        current_status.change_reason = CR_HB_ERROR;
        return;
    }

    if (!cmdValid)
        return;
# 171 "/home/goldhoorn/dev-avalon/drivers/hbridge/firmware/mainboard/avalon/main.c"
    int scaling=270;
    printf("%i, %i, %i, %i, %i, %i\n", (curCmd.strave-127)*scaling, (curCmd.dive-127)*scaling, (curCmd.left-127)*scaling, (curCmd.right-127)*scaling, (curCmd.pitch-127)*scaling, (curCmd.yaw-127)*scaling);
    hbridge_setValues(
            (curCmd.right-127) * scaling *-1,
            (curCmd.left-127) * scaling *-1,
            (curCmd.dive-127) * scaling *-1,
            (curCmd.pitch-127) + (((curCmd.dive-127)*3)/10) * scaling *-1,
            PACKET_ID_SET_VALUE14);

    hbridge_setValues(
            (curCmd.strave-127) * scaling,
            (curCmd.yaw-127) * scaling,
            0,
            0,
            PACKET_ID_SET_VALUE58);
    current_status.change_reason = CR_LEGAL;

};


void init(){
    Assert_Init(((GPIO_TypeDef *) ((((uint32_t)0x40000000) + 0x10000) + 0x0800)), ((uint16_t)0x1000), USE_USART1);

    USART1_Init(USART_POLL);




    USART2_Init(USART_USE_INTERRUPTS);
    USART3_Init(USART_USE_INTERRUPTS, 57600);




    printf_setSendFunction(USART1_SendData);


    uwmodem_init(&USART3_SendData, &USART3_GetData, &USART3_SeekData, &surface);




    printf("The Maiboard is up with the version: 1.2 ");
    USART5_Init(USART_USE_INTERRUPTS);
    printf("OK ");

    timeout_init(3000);

    protocol_setOwnHostId(SENDER_ID_MAINBOARD);

    CAN_Configuration(CAN_NO_REMAP);
    CAN_ConfigureFilters(0);

    startHardPeriodicThread(1000, time_msPassed);
    lastStateTime = time_getTimeInMs();

    can_protocolInit();

    current_status.current_state = (ARC_SYSTEM_STATE)mbstate_getCurrentState();
    current_status.wanted_state = OFF;
    current_status.current_depth = 0;
    current_status.water_ingress_front = 0;
    current_status.water_ingress_back = 0;
    current_status.change_reason = CR_INITIAL;


    while(time_getTimeInMs() - lastStateTime < 30);

    protocol_init(1);
    protocol_setRecvFunc(avaloncan_recvPacket);
    protocol_registerHandler(PACKET_ID_STATUS, &hbridgeStatusHandler);
    protocol_registerHandler(PACKET_ID_EXTENDED_STATUS, &hbridgeExtendedStatusHandler);


    hbridge_init(6);
    unsigned int i;
    struct actuatorConfig *ac;
    struct sensorConfig *sc;
    for(i = 0;i<6;i++){
        hbridge_setControllerWithData(i, CONTROLLER_MODE_PWM, 0, ((void *)0), 0);
        ac = getActuatorConfig(i);
        ac->openCircuit = 1;
        ac->maxCurrent = 3000;
        ac->maxCurrentCount = 200;
        ac->maxMotorTemp = 200;
        ac->maxMotorTempCount = 50;
        ac->maxBoardTemp = 60;
        ac->maxBoardTempCount = 50;
        ac->pwmStepPerMs = 40;
        ac->timeout = 32000;

        sc = getSensorConfig(i);
        sc->statusEveryMs = 100;
        hbridge_configureSensors();
    }




    arc_multichannel_init();
    arc_multichannel_addTokenSerialDriver(&USART2_SendData, &USART2_GetData, &USART2_SeekData);
    arc_multichannel_addSerialDriver(&USART5_SendData, &USART5_GetData, &USART5_SeekData);
    arc_multichannel_setOwnSystemID(AVALON);




    mbstate_init();
    packet_init();

    packet_registerHandler(MB_CONTROL, avalon_controlHandler);
    packet_registerHandler(MB_ID_CAN, avalon_packet_canHandler);
    packet_registerHandler(MB_SET_STATE, avalon_packet_setStateHandler);


    struct MainboardState *state_off=mbstate_getState(MAINBOARD_RUNNING);
    state_off->stateHandler=avalon_offState;

    struct MainboardState *state_running=mbstate_getState(MAINBOARD_RUNNING);
    state_running->stateHandler=avalon_runningState;

    struct MainboardState *state_autonomous=mbstate_getState(MAINBOARD_AUTONOMOUS);
    state_autonomous->stateHandler=avalon_autonomousState;
}


int main()
{
    init();
    mbstate_changeState(MAINBOARD_RUNNING);
    while(1)
    {
        unsigned int curTime = time_getTimeInMs();

        if(curTime != lastStateTime)
        {

            mbstate_processState();
            lastStateTime = curTime;
            if (status_loops >= 500){
                sendStatusPacket();
                status_loops = 0;
            } else {
                status_loops++;
            }
        }
        arc_packet_t packet;

        while(arc_multichannel_readPacket(&packet)){

            packet_handlePacket(packet.originator, packet.system_id, packet.packet_id, packet.data, packet.length);
        }
        arc_multichannel_processPackets();
        hbridge_process();

        uwmodem_process();

    }
    return 0;
}
